Learning OOPS
Resource Link : 
-   https://www.youtube.com/live/Trvqq5w7-0Q?si=JNxQHum14fMSRjcK
-   https://www.youtube.com/live/P4xizq3CiJg?si=L8SeRVJBWXbjVLAp
-   https://www.youtube.com/live/bEWwM4hXZg8?si=0GPhWTD7UZ-8uYZ8



Topics in OOPS:
- Class
- Object
- Abstraction
- Incapsulation
- Polymorphism
- Inheritance


Class:
Class is a blueprint
Object is an instance of the class

Types of class:
built-in
user defined

Constructor:
- Special function
- self call (the moment you create an object of the class)

- Functions inside a class is called method (thou they are functions only but we cll them method)

Magic Method/Dunder Method =======
Identification = __<name>__

-- All the configuration related code we write inside Constructor, any piece of code you don't want give control to the user
-- Self is nothing but the current object

Fraction Class =======
__str__ => tells how output should look like (__str__ magic method)

-- __add__ = auto executes, if it finds any + operator in code

Reference Variable =======
holds the memory of the location of the object, and not the actual object

-- Python objects are mutable by default

Encapsulation =======
Instance variable = is a special variable that will have differernt value for differernt object (depending on object)

private variable =====
adding __ infront of a variable makes it a private variable
after making a variable as private, now in memory this is stored as _<classname>__<variablename>

Static Variable ======
Static variable remains same for all objects, same not equal

static variable is of class
instance variable is of object

Aggregation ======
You can access private attributes while performing Aggregation

Inheritance ======
Inherite all the variables and methods from the parent class
just need to add (<parent class name>) next to child class name


if a child doesn't have a constructor of its own, then it will call parents constructor
but if a child has a constructor of its own, parents constructor will never be called and thus the varuables and methods inside parents class will never get initialised
A Child can't access private attributes from it's parent class
if both parent and child has same method, child one will be executed


